How did viewing a diff between two versions of a file help you see the bug that
was introduced?

    Used the Compare addon to Notepad++ that I already had, was easy.

How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?

    See changes by all user

What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
docs does?

    Can commit a unit of work that makes logical sense

Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

    Because the files could be interrelated and so it makes sense to do so

How can you use the commands git log and git diff to view the history of files?

git log

git diff 71d52709ddc4066e7a79a1d0a412e43429a0cdeb 547f4171a82ec6429d002c1acef357aec41d3f17
    Fill in your answer here

How might using version control make you more confident to make changes that
could break something?

    You can easily roll ack to a working copy

Now that you have your workspace set up, what do you want to try using Git for?

    Fill in your answer here
	
	
	

	
	
Git command review
Compare two commits, printing each line that is present in one commit but not the other.

git diff will do this. It takes two arguments - the two commit ids to compare. 


Make a copy of an entire Git repository, including the history, onto your own computer.

git clone will do this. It takes one argument - the url of the repository to copy. 


Temporarily reset all files in a directory to their state at the time of a specific commit.

git checkout will do this. It takes one argument - the commit ID to restore. 


Show the commits made in this repository, starting with the most recent.

git log will do this. It doesn't take any arguments.


ls -a

git init - new repository in a directory
git status - what files have changed since last commit

